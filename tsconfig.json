{
  // 编译选项
  "compilerOptions": {
    /** 基本配置 **/
    // 指定编译输出目标ECMAScript版本： "ES3"（默认）， "ES5"， "ES6"/ "ES2015"， "ES2016"， "ES2017"或 "ESNext"。
    // "ESNext"最新的生成目标列表为 ES proposed features
    "target": "ES5",
    // 指定采用的模块系统 module，"None"， "CommonJS"， "AMD"， "System"， "UMD"， "ES6"或 "ES2015"。 target === "ES6" ? "ES6" : "commonjs"
    "module": "ESNext",                       // 指定生成哪个模块系统代码
    // 以严格模式解析, 启用所有严格类型检查选项，启用 --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。
    "strict": false, // 是否启用所有严格类型检查选项
    // 以严格模式解析并为每个源文件生成 "use strict"语句
    // "alwaysStrict": true,
    // "strictFunctionTypes": true, // 禁用函数参数双向协变检查
    // 确保类的非undefined属性已经在构造函数里初始化。若要令此选项生效，需要同时启用--strictNullChecks。
    // "strictPropertyInitialization": false,
    // 在严格的 null检查模式下， null和 undefined值不包含在任何类型里，只允许用它们自己和 any来赋值（有个例外， undefined可以赋值到 void）
    "strictNullChecks": true, 
    // 输入文件的字符集 
    "charset": "utf8",
    // 显示错误信息时使用的语言，比如：en-us
    // "locale": "cn-zh",
    
    // --project 编译指定目录下的项目。这个目录应该包含一个 tsconfig.json文件来管理编译。
    // --reactNamespace	string	"React"	当目标为生成 "react" JSX时，指定 createElement和 __spread的调用对象
    "allowJs": true,  // 允许编译javascript文件
    // "maxNodeModuleJsDepth": 0, // node_modules依赖的最大搜索深度并加载JavaScript文件。仅适用于 --allowJs
    "allowUnreachableCode": false, // 不报告执行不到的代码错误
    "allowUnusedLabels": false, // 不报告未使用的标签错误。
    // 在 .js文件中报告错误。与 --allowJs配合使用
    "checkJs": false,	
    "jsx": "react-jsx", // "React"或"Preserve", 在.tsx文件里支持JSX
    // "jsxFactory": "h", // JSX时，使用的JSX工厂函数，比如 React.createElement或 h
    // 编译过程中需要引入的库文件的列表。注意：如果--lib没有指定默认注入的库的列表。
    /* 默认注入的库为：
     ► 对--target ES5：DOM，ES5，ScriptHost
     ► 对--target ES6：DOM，ES6，DOM.Iterable，ScriptHost */
    "lib": ["DOM", "DOM.Iterable", "ESNext", "ScriptHost"], // 编译过程中需要引入的库文件的列表  "es5"
      // 要包含的类型声明文件路径列表
    "typeRoots": ["./node_modules/@types", "./src/@types"],

    /** 模块解析选项 **/
    //module === "AMD" or "System" or "ES6" ? "Classic" : "Node"	决定如何处理模块。或者是"Node"对于Node.js/io.js，或者是"Classic"（默认）。
    "moduleResolution": "Node",               // 指定模块解析策略
    "esModuleInterop": true,                  // 支持 CommonJS 和 ES 模块之间的互操作性
    // "importsNotUsedAsValues": "preserve",
    // "incremental": true,
    "resolveJsonModule": true,                // 支持导入 json 模块
    // 生成相应的 .map文件， 可用于 debug 的 sourceMap, 与inlineSourceMap二选一
    "sourceMap": true,
    "inlineSourceMap": false, // 生成单个sourcemaps文件，而不是将每sourcemaps生成不同的文件。
    "inlineSources": false, // 将代码与sourcemaps生成到一个文件中，要求同时设置了 --inlineSourceMap或 --sourceMap属性
    // "sourceRoot": "./",	指定TypeScript源文件的路径，以便调试器定位。当TypeScript文件的位置是在运行时指定时使用此标记。路径信息会被加到 sourceMap里
    // 为调试器指定指定sourcemap文件的路径，而不是使用生成时的路径。
    // "mapRoot": "./", 当.map文件是在运行时指定的，并不同于 js文件的地址时使用这个标记。指定的路径会嵌入到 sourceMap里告诉调试器到哪里去找它们。
    // 解析非相对模块名的基准目录 
    "baseUrl": "./",                          // 根路径
    // 设置引入的类型声明文件名列表。
    "types": ["node", "webpack-env", "jest"],
    // 模块名到基于 baseUrl的路径映射的列表（指定特殊模块的路径）
    "paths": {                   // 路径映射，与 baseUrl 关联
      "@@/*": ["src/*"],
      "@@components/*": ["src/components/*"],
      "@@utils/*": ["src/utils/*"],
      "@@assets/*": ["src/assets/*"],
      "@@public/*": ["public/*"],
      "@@env/*": ["env/*"],
      "*": ["node_modules/*"]
    },

    /** 实验性选项 **/
    "experimentalDecorators": true,           // 启用实验性的ES装饰器
    "emitDecoratorMetadata": true,            // 给源码里的装饰器声明加上设计类型元数据

    /** 其他选项 **/
    "forceConsistentCasingInFileNames": true,	// 禁止对同一个文件的不一致的引用。 
    "listEmittedFiles": false,	// 打印出编译后生成文件的名字
    "listFiles": false,	// 编译过程中打印文件名。"
    "noEmitHelpers": false,	// 不在输出文件中生成用户自定义的帮助函数代码，如 __extends。
    "noEmitOnError": false,	// 报错时不生成输出文件
    "noErrorTruncation": false,	// 不截短错误消息
    "skipLibCheck": true,                     // 忽略所有的声明文件（ *.d.ts）的类型检查
    // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。
    "allowSyntheticDefaultImports": true, // module === "system" 或 设置了esModuleInterop 且 module 不为 es2015 / esnext
    "noEmit": true,							              // 只想使用tsc的类型检查作为函数时（当其他工具（例如Babel实际编译）时）使用它
    // "noEmit": false,	//	不生成输出文件。
    "importHelpers": true,  // 从tslib导入辅助工具函数（比如 __extends， __rest等）
    // 当生成文件时指定行结束符： "crlf"（windows）或 "lf"（unix）
    "newLine": "lf",
    // 给错误和消息设置样式，使用颜色和上下文。
    "pretty": true,
    // 将每个文件作为单独的模块（与“ts.transpileModule”类似）。
    "isolatedModules": true,  // 提供额外的一些语法检查，如文件没有模块导出会报错
    // 生成相应的 .d.ts文件
    "declaration": true,
    // 生成声明文件的输出路径
    "declarationDir": "./src",
    "diagnostics": false, // 显示诊断信息
    "extendedDiagnostics": false, // 显示详细的诊段信息
    "disableSizeLimit": false, //	禁用JavaScript工程体积大小的限制
    "emitBOM": false,	// 在输出文件的开头加入BOM头（UTF-8 Byte Order Mark）
    // 忽略 this/any 的类型检查（当 this表达式的值为 any类型的时候，生成一个错误）
    "noImplicitThis": false,
    "noImplicitAny": false, // 在表达式和声明上有隐含的 any类型时报错
    "noFallthroughCasesInSwitch": true,	// 报告switch语句的fallthrough错误。（即，不允许switch的case语句贯穿）
    "noImplicitReturns": false,	// 不是函数的所有返回路径都有返回值时报错。
    "noImplicitUseStrict": false,	// 模块输出中不包含"use strict"指令
    "noLib": false,	// 不包含默认的库文件（ lib.d.ts）
    "noResolve": false,	// 不把 /// <reference``>或模块导入的文件加到编译文件列表。
    "noStrictGenericChecks": false,	// 禁用在函数类型里对泛型签名进行严格检查。
    "noUnusedLocals": true,	// 若有未使用的局部变量则抛错
    "noUnusedParameters": false,	// 若有未使用的参数则抛错
    // 仅用来控制输出的目录结构 --outDir
    // "outDir": "dist",  // 重定向输出目录
    // "outFile": "dist",  // 将输出文件合并为一个文件。合并的顺序是根据传入编译器的文件顺序和 ///<reference``>和 import的文件顺序决定的
    // "rootDir":	"./", "src", 根（root）文件夹列表，表示运行时组合工程结构的内容。
    "preserveConstEnums": true,	// 保留 const和 enum声明
    "preserveSymlinks": false,	// 不把符号链接解析为其真实路径；将符号链接文件视为真正的文件
    "preserveWatchOutput": false,	// 保留watch模式下过时的控制台输出
    "skipDefaultLibCheck": false,	// 忽略库的默认声明文件的类型检查
    "removeComments": false,  // 删除所有注释，除了以 /!*开头的版权信息
    "stripInternal": false,  //	不对具有 /** @internal */ JSDoc注解的代码生成代码
    "suppressExcessPropertyErrors": false,  // 阻止对对象字面量的额外属性检查
    "suppressImplicitAnyIndexErrors": true,  // 阻止 --noImplicitAny对缺少索引签名的索引对象报错
    "traceResolution": false,  // 生成模块解析日志信息
    "version": true,	// 打印编译器版本号
    // watch		在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。监视文件和目录的具体实现可以通过环境变量进行配置。
  },
  // ts 管理的文件
  "include": ["src/**/*.ts", "src/**/*.tsx", "tests/**/*.ts", "tests/**/*.tsx"],
  // ts 排除的文件
  "exclude": [
    "node_modules/**",
    "build/**",
    "webpacker/**",
    "dist/**",
    "coverage/**",
    "src/*.d.ts",
    "scripts",
    "acceptance-tests",
    "jest", 
  ]
  // "files": ["src/shims-vue.d.ts", "src/shims-tsx.d.ts", "src/vue.d.ts"]
}